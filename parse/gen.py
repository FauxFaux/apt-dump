#!/usr/bin/env python3
import collections
# fields apt likes, and we like too; we're going to parse them
import os
import re

HANDLED_FIELDS = {
    # core
    'Package',
    'Source',
    'Version',

    # mapped into proper types
    'Priority',
    'Architecture',
    'Format',

    # parsed into Binaries
    'Binary',
    'Package-List',

    # parsed into Files
    'Files',

    # typo of Original-Maintainer, upstart in xenial
    'Orig-Maintainer',

    # parsed build-deps
    'Build-Conflicts',
    'Build-Conflicts-Arch',
    'Build-Conflicts-Indep',
    'Build-Depends',
    'Build-Depends-Arch',
    'Build-Depends-Indep',

    # folded into Files
    'Checksums-Md5',
    'Checksums-Sha1',
    'Checksums-Sha256',
    'Checksums-Sha512',
}

# What a mess.
for vcs in [
    'Arch',
    'Browse',
    'Browser',
    'Bzr',
    'Cvs',
    'Darcs',
    'Git',
    'Hg',
    'Mtn',
    'Svn',
]:
    HANDLED_FIELDS.add('Vcs-' + vcs)
    HANDLED_FIELDS.add('Orig-Vcs-' + vcs)
    HANDLED_FIELDS.add('Original-Vcs-' + vcs)
    HANDLED_FIELDS.add('Debian-Vcs-' + vcs)
    HANDLED_FIELDS.add('Upstream-Vcs-' + vcs)
    HANDLED_FIELDS.add('Vcs-Upstream-' + vcs)

KNOWN_FIELDS = [
    # The set that apt supported on a random day
    'Architecture',
    'Binary',
    'Breaks',
    'Bugs',
    'Build-Conflicts',
    'Build-Conflicts-Arch',
    'Build-Conflicts-Indep',
    'Build-Depends',
    'Build-Depends-Arch',
    'Build-Depends-Indep',
    'Built-For-Profiles',
    'Built-Using',
    'Checksums-Md5',
    'Checksums-Sha1',
    'Checksums-Sha256',
    'Checksums-Sha512',
    'Class',
    'Conffiles',
    'Config-Version',
    'Conflicts',
    'Depends',
    'Description',
    'Description-md5',
    'Directory',
    'Dm-Upload-Allowed',
    'Enhances',
    'Essential',
    'Filename',
    'Files',
    'Format',
    'Homepage',
    'Important',
    'Installed-Size',
    'Installer-Menu-Item',
    'Kernel-Version',
    'Maintainer',
    'MD5sum',
    'MSDOS-Filename',
    'Multi-Arch',
    'Optional',
    'Origin',
    'Original-Maintainer',
    'Package',
    'Package-List',
    'Package-Revision',
    'Package-Type',
    'Pre-Depends',
    'Priority',
    'Provides',
    'Recommended',
    'Recommends',
    'Replaces',
    'Revision',
    'Section',
    'SHA1',
    'SHA256',
    'SHA512',
    'Size',
    'Source',
    'Standards-Version',
    'Status',
    'Subarchitecture',
    'Suggests',
    'Tag',
    'Task',
    'Testsuite',
    'Testsuite-Triggers',
    'Triggers-Awaited',
    'Triggers-Pending',
    'Uploaders',
    'Vcs-Arch',
    'Vcs-Browse',
    'Vcs-Browser',
    'Vcs-Bzr',
    'Vcs-Cvs',
    'Vcs-Darcs',
    'Vcs-Git',
    'Vcs-Hg',
    'Vcs-Mtn',
    'Vcs-Svn',
    'Version',

    # Fields that have been seen in the wild, but which apt ignores.
    'Autobuild',
    'Testsuite-Restrictions',
    'Extra-Source-Only',

    'Build-Indep-Architecture',

    'Debian-Vcs-Browser',
    'Debian-Vcs-Git',
    'Debian-Vcs-Svn',
    'Dgit',
    'Orig-Vcs-Browser',
    'Orig-Vcs-Git',
    'Orig-Vcs-Svn',
    'Original-Vcs-Browser',
    'Original-Vcs-Bzr',
    'Upstream-Vcs-Bzr',
    'Vcs-Upstream-Bzr',

    'Go-Import-Path',
    'Python-Version',
    'Python3-Version',
    'Ruby-Versions',

    'Comment',
]

ALIASES = {
    'Package_Revision': 'Package-Revision',
    'Orig-Maintainer': 'Original-Maintainer'
}

def to_snake(s: str) -> str:
    return re.sub(r'(?!^)[_-]([a-zA-Z])', lambda m: m.group(1).upper(), s.lower())


def to_rust(s: str) -> str:
    return re.sub(r'[_-]', '_', s.lower())


def main():
    text_fields = []
    for field in KNOWN_FIELDS:
        if field not in HANDLED_FIELDS:
            text_fields.append(field)

    max_len = max(len(to_snake(field)) for field in text_fields)
    capnp_format_string = ('    {: <' + str(max_len) + '} @{} :Text;\n')
    rust_format_string = '        "{}" => blank_to_null(val, |x| builder.set_{}(x)),\n'

    with open('../apt.capnp~', 'w') as tmp:
        with open('../apt.capnp') as orig:
            for line in orig:
                tmp.write(line)
                if '## generated by gen.py' == line.strip():
                    break

        tmp.write("""
struct UnparsedSource {
""")
        for i, field in enumerate(text_fields):
            tmp.write(capnp_format_string.format(to_snake(field), i))

        tmp.write("}\n")

    os.rename('../apt.capnp~', '../apt.capnp')

    with open('src/fields.rs', 'w') as f:
        f.write("""// GENERATED by gen.py; do not edit
#![cfg_attr(rustfmt, rustfmt_skip)]

use apt_capnp::unparsed_source;
use errors::*;
use blank_to_null;

pub const HANDLED_FIELDS: [&'static str; """ + str(len(HANDLED_FIELDS)) + """] = [
""")
        for field in sorted(HANDLED_FIELDS):
            f.write('    "{}",\n'.format(field))

        f.write("""];

pub fn set_field(key: &str, val: &str, builder: &mut unparsed_source::Builder) -> Result<()> {
    match key {
""")
        for orig in sorted(text_fields):
            f.write(rust_format_string.format(orig, to_rust(orig)))

        f.write("\n        // Typos\n")
        for key, val in ALIASES.items():
            f.write(rust_format_string.format(key, to_rust(val)))

        f.write("""
        other => bail!("unrecognised field: {}", other), 
    }

    Ok(())
}
""")


if __name__ == '__main__':
    main()
