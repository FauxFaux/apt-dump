#!/usr/bin/env python3
import collections
import re
from typing import Set

# fields apt likes, and we like too; we're going to parse them
HANDLED_FIELDS = {
    # core
    'Package',
    'Source',
    'Version',

    # mapped into proper types
    'Priority',
    'Architecture',
    'Format',

    # parsed into Binaries
    'Binary',
    'Package-List',

    # parsed into Files
    'Files',

    # typo of Original-Maintainer, upstart in xenial
    'Orig-Maintainer',

    # parsed build-deps
    'Build-Conflicts',
    'Build-Conflicts-Arch',
    'Build-Conflicts-Indep',
    'Build-Depends',
    'Build-Depends-Arch',
    'Build-Depends-Indep',

    # folded into Files
    'Checksums-Md5',
    'Checksums-Sha1',
    'Checksums-Sha256',
    'Checksums-Sha512',
}

# What a mess.
for vcs in [
    'Arch',
    'Browse',
    'Browser',
    'Bzr',
    'Cvs',
    'Darcs',
    'Git',
    'Hg',
    'Mtn',
    'Svn',
]:
    HANDLED_FIELDS.add('Vcs-' + vcs)
    HANDLED_FIELDS.add('Orig-Vcs-' + vcs)
    HANDLED_FIELDS.add('Original-Vcs-' + vcs)
    HANDLED_FIELDS.add('Debian-Vcs-' + vcs)
    HANDLED_FIELDS.add('Upstream-Vcs-' + vcs)
    HANDLED_FIELDS.add('Vcs-Upstream-' + vcs)

# Fields that have been seen in the wild, but which apt ignores.
EXTRA_FIELDS = {
    'Autobuild',
    'Testsuite-Restrictions',

    'Build-Indep-Architecture',

    'Debian-Vcs-Browser',
    'Debian-Vcs-Git',
    'Debian-Vcs-Svn',
    'Dgit',
    'Orig-Vcs-Browser',
    'Orig-Vcs-Git',
    'Orig-Vcs-Svn',
    'Original-Vcs-Browser',
    'Original-Vcs-Bzr',
    'Upstream-Vcs-Bzr',
    'Vcs-Upstream-Bzr',

    'Go-Import-Path',
    'Python-Version',
    'Python3-Version',
    'Ruby-Versions',
}


def to_snake(s: str) -> str:
    return re.sub(r'(?!^)[_-]([a-zA-Z])', lambda m: m.group(1).upper(), s.lower())


def to_rust(s: str) -> str:
    return re.sub(r'[_-]', '_', s.lower())


def main(known_fields: Set[str]):
    text_fields = known_fields.union(EXTRA_FIELDS) - HANDLED_FIELDS
    base_index = 19
    max_len = max(len(to_snake(field)) for field in text_fields)
    capnp_format_string = ('    {: <' + str(max_len) + '} @{} :Text;')
    rust_format_string = '        "{}" => blank_to_null(val, |x| builder.set_{}(x)),\n'

    text_from = collections.defaultdict(set)
    for field in text_fields:
        text_from[to_snake(field)].add(field)

    for i, field in enumerate(sorted(text_from.keys())):
        print(capnp_format_string.format(field, base_index + i))

    with open('src/fields.rs', 'w') as f:
        f.write("""/// GENERATED by gen.py; do not edit

use apt_capnp::source;
use errors::*;
use blank_to_null;

pub const HANDLED_FIELDS: [&'static str; """ + str(len(HANDLED_FIELDS)) + """] = [
""")
        for field in sorted(HANDLED_FIELDS):
            f.write('    "{}",\n'.format(field))

        f.write("""
];

pub fn set_field(key: &str, val: &str, builder: &mut source::Builder) -> Result<()> {
    match key {
""")
        for orig in sorted(text_fields):
            f.write(rust_format_string.format(orig, to_rust(orig)))
        f.write("""
        other => bail!("unrecognised field: {}", other), 
    }

    Ok(())
}
""")


if __name__ == '__main__':
    with open('tagfile-keys.list') as input:
        main(set(line.strip() for line in input.readlines()))
